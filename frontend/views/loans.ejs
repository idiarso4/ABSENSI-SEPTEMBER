<!DOCTYPE html>
<html lang="id">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Manajemen Pinjaman - Sistem HRM</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
  <%- include('partials/navbar') %>

  <div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
      <h2><i class="bi bi-cash"></i> Manajemen Pinjaman</h2>
      <div class="d-flex gap-2">
        <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addLoanModal">
          <i class="bi bi-plus-circle"></i> Ajukan Pinjaman
        </button>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addLoanTypeModal">
          <i class="bi bi-gear"></i> Kelola Jenis Pinjaman
        </button>
      </div>
    </div>

    <!-- Summary Cards -->
    <div class="row mb-4">
      <div class="col-md-3">
        <div class="card bg-info text-white">
          <div class="card-body">
            <h5 class="card-title">Total Pinjaman</h5>
            <h3 id="totalLoans">-</h3>
            <small>Aktif</small>
          </div>
        </div>
      </div>
      <div class="col-md-3">
        <div class="card bg-warning text-white">
          <div class="card-body">
            <h5 class="card-title">Menunggu Approval</h5>
            <h3 id="pendingLoans">-</h3>
            <small>Belum Disetujui</small>
          </div>
        </div>
      </div>
      <div class="col-md-3">
        <div class="card bg-success text-white">
          <div class="card-body">
            <h5 class="card-title">Total Pembayaran</h5>
            <h3 id="totalPayments">-</h3>
            <small>Bulan Ini</small>
          </div>
        </div>
      </div>
      <div class="col-md-3">
        <div class="card bg-danger text-white">
          <div class="card-body">
            <h5 class="card-title">Outstanding</h5>
            <h3 id="outstandingAmount">-</h3>
            <small>Belum Dibayar</small>
          </div>
        </div>
      </div>
    </div>

    <!-- Navigation Tabs -->
    <ul class="nav nav-tabs mb-4" id="loanTabs" role="tablist">
      <li class="nav-item" role="presentation">
        <button class="nav-link active" id="pending-tab" data-bs-toggle="tab" data-bs-target="#pending" type="button" role="tab">Pinjaman Tertunda</button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="manage-tab" data-bs-toggle="tab" data-bs-target="#manage" type="button" role="tab">Kelola Pinjaman</button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="repayments-tab" data-bs-toggle="tab" data-bs-target="#repayments" type="button" role="tab">Pembayaran Kembali</button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link" id="types-tab" data-bs-toggle="tab" data-bs-target="#types" type="button" role="tab">Jenis Pinjaman</button>
      </li>
    </ul>

    <!-- Tab Content -->
    <div class="tab-content" id="loanTabContent">
      <!-- Pending Loans Tab -->
      <div class="tab-pane fade show active" id="pending" role="tabpanel">
        <div class="card">
          <div class="card-header">
            <h5>Pinjaman Menunggu Persetujuan</h5>
          </div>
          <div class="card-body">
            <div class="table-responsive">
              <table class="table table-striped table-hover">
                <thead>
                  <tr>
                    <th>Karyawan</th>
                    <th>Jenis Pinjaman</th>
                    <th>Jumlah</th>
                    <th>Tenor</th>
                    <th>Tanggal Pengajuan</th>
                    <th>Status</th>
                    <th>Aksi</th>
                  </tr>
                </thead>
                <tbody id="pendingLoansTableBody">
                  <tr>
                    <td colspan="7" class="text-center">
                      <div class="spinner-border" role="status">
                        <span class="visually-hidden">Memuat...</span>
                      </div>
                      Memuat data pinjaman tertunda...
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>

      <!-- Manage Loans Tab -->
      <div class="tab-pane fade" id="manage" role="tabpanel">
        <div class="card">
          <div class="card-header">
            <h5>Kelola Pinjaman Aktif</h5>
          </div>
          <div class="card-body">
            <div class="table-responsive">
              <table class="table table-striped table-hover">
                <thead>
                  <tr>
                    <th>Karyawan</th>
                    <th>Jenis Pinjaman</th>
                    <th>Jumlah Pinjaman</th>
                    <th>Sisa Pinjaman</th>
                    <th>Tenor</th>
                    <th>Status</th>
                    <th>Aksi</th>
                  </tr>
                </thead>
                <tbody id="manageLoansTableBody">
                  <tr>
                    <td colspan="7" class="text-center">
                      <div class="spinner-border" role="status">
                        <span class="visually-hidden">Memuat...</span>
                      </div>
                      Memuat data pinjaman aktif...
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>

      <!-- Repayments Tab -->
      <div class="tab-pane fade" id="repayments" role="tabpanel">
        <div class="card">
          <div class="card-header">
            <h5>Riwayat Pembayaran</h5>
          </div>
          <div class="card-body">
            <div class="table-responsive">
              <table class="table table-striped table-hover">
                <thead>
                  <tr>
                    <th>Karyawan</th>
                    <th>Pinjaman</th>
                    <th>Jumlah Pembayaran</th>
                    <th>Tanggal Pembayaran</th>
                    <th>Metode</th>
                    <th>Status</th>
                    <th>Aksi</th>
                  </tr>
                </thead>
                <tbody id="repaymentsTableBody">
                  <tr>
                    <td colspan="7" class="text-center">
                      <div class="spinner-border" role="status">
                        <span class="visually-hidden">Memuat...</span>
                      </div>
                      Memuat data pembayaran...
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>

      <!-- Loan Types Tab -->
      <div class="tab-pane fade" id="types" role="tabpanel">
        <div class="card">
          <div class="card-header">
            <h5>Kelola Jenis Pinjaman</h5>
          </div>
          <div class="card-body">
            <div class="table-responsive">
              <table class="table table-striped table-hover">
                <thead>
                  <tr>
                    <th>Nama Jenis</th>
                    <th>Deskripsi</th>
                    <th>Bunga (%)</th>
                    <th>Tenor Max</th>
                    <th>Status</th>
                    <th>Aksi</th>
                  </tr>
                </thead>
                <tbody id="loanTypesTableBody">
                  <tr>
                    <td colspan="6" class="text-center">
                      <div class="spinner-border" role="status">
                        <span class="visually-hidden">Memuat...</span>
                      </div>
                      Memuat data jenis pinjaman...
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Add Loan Modal -->
  <div class="modal fade" id="addLoanModal" tabindex="-1" aria-labelledby="addLoanModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="addLoanModalLabel">Ajukan Pinjaman</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Tutup"></button>
        </div>
        <div class="modal-body">
          <form id="loanForm">
            <div class="row">
              <div class="col-md-6">
                <div class="mb-3">
                  <label for="loanEmployee" class="form-label">Karyawan *</label>
                  <select class="form-select" id="loanEmployee" required>
                    <option value="">Pilih Karyawan</option>
                  </select>
                </div>
              </div>
              <div class="col-md-6">
                <div class="mb-3">
                  <label for="loanType" class="form-label">Jenis Pinjaman *</label>
                  <select class="form-select" id="loanType" required>
                    <option value="">Pilih Jenis Pinjaman</option>
                  </select>
                </div>
              </div>
            </div>
            <div class="row">
              <div class="col-md-6">
                <div class="mb-3">
                  <label for="loanAmount" class="form-label">Jumlah Pinjaman (Rp) *</label>
                  <input type="number" class="form-control" id="loanAmount" min="0" step="1000" required>
                </div>
              </div>
              <div class="col-md-6">
                <div class="mb-3">
                  <label for="loanTenor" class="form-label">Tenor (Bulan) *</label>
                  <input type="number" class="form-control" id="loanTenor" min="1" max="60" required>
                </div>
              </div>
            </div>
            <div class="row">
              <div class="col-md-6">
                <div class="mb-3">
                  <label for="loanPurpose" class="form-label">Tujuan Pinjaman *</label>
                  <input type="text" class="form-control" id="loanPurpose" required>
                </div>
              </div>
              <div class="col-md-6">
                <div class="mb-3">
                  <label for="monthlyInstallment" class="form-label">Angsuran Bulanan</label>
                  <input type="number" class="form-control" id="monthlyInstallment" readonly>
                </div>
              </div>
            </div>
            <div class="mb-3">
              <label for="loanDescription" class="form-label">Deskripsi Tambahan</label>
              <textarea class="form-control" id="loanDescription" rows="3"></textarea>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Batal</button>
          <button type="button" class="btn btn-primary" id="submitLoanBtn">Ajukan Pinjaman</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Add Loan Type Modal -->
  <div class="modal fade" id="addLoanTypeModal" tabindex="-1" aria-labelledby="addLoanTypeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="addLoanTypeModalLabel">Tambah Jenis Pinjaman</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Tutup"></button>
        </div>
        <div class="modal-body">
          <form id="loanTypeForm">
            <div class="mb-3">
              <label for="loanTypeName" class="form-label">Nama Jenis Pinjaman *</label>
              <input type="text" class="form-control" id="loanTypeName" required>
            </div>
            <div class="mb-3">
              <label for="loanTypeDescription" class="form-label">Deskripsi</label>
              <textarea class="form-control" id="loanTypeDescription" rows="2"></textarea>
            </div>
            <div class="row">
              <div class="col-md-6">
                <div class="mb-3">
                  <label for="interestRate" class="form-label">Bunga (%) *</label>
                  <input type="number" class="form-control" id="interestRate" min="0" step="0.1" required>
                </div>
              </div>
              <div class="col-md-6">
                <div class="mb-3">
                  <label for="maxTenor" class="form-label">Tenor Max (Bulan) *</label>
                  <input type="number" class="form-control" id="maxTenor" min="1" max="120" required>
                </div>
              </div>
            </div>
            <div class="mb-3">
              <label for="eligibilityCriteria" class="form-label">Kriteria Kelayakan</label>
              <textarea class="form-control" id="eligibilityCriteria" rows="3" placeholder="Contoh: Masa kerja minimal 1 tahun, gaji minimal 3jt"></textarea>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Batal</button>
          <button type="button" class="btn btn-primary" id="saveLoanTypeBtn">Simpan</button>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    function getToken() { return localStorage.getItem('token') || ''; }

    function formatIDR(n) {
      return new Intl.NumberFormat('id-ID', {
        style: 'currency',
        currency: 'IDR',
        minimumFractionDigits: 0
      }).format(n || 0);
    }

    let employees = [];
    let loanTypes = [];
    let loans = [];
    let repayments = [];

    // Logout functionality
    document.getElementById('logoutBtn')?.addEventListener('click', function(e) {
      e.preventDefault();
      localStorage.removeItem('token');
      window.location.href = '/login';
    });

    async function loadEmployees() {
      try {
        const response = await fetch('/api/employees', {
          headers: { 'Authorization': 'Bearer ' + getToken() }
        });
        if (response.status === 401) {
          window.location.href = '/login';
          return;
        }
        employees = await response.json();
        populateEmployeeDropdowns();
      } catch (error) {
        console.error('Error loading employees:', error);
      }
    }

    async function loadLoanTypes() {
      try {
        const response = await fetch('/api/loan-types', {
          headers: { 'Authorization': 'Bearer ' + getToken() }
        });
        if (response.ok) {
          loanTypes = await response.json();
          populateLoanTypeDropdowns();
          renderLoanTypesTable();
        }
      } catch (error) {
        console.error('Error loading loan types:', error);
      }
    }

    async function loadLoans() {
      try {
        const response = await fetch('/api/employee-loans', {
          headers: { 'Authorization': 'Bearer ' + getToken() }
        });
        if (response.ok) {
          loans = await response.json();
          renderPendingLoansTable();
          renderManageLoansTable();
          updateSummary();
        }
      } catch (error) {
        console.error('Error loading loans:', error);
      }
    }

    async function loadRepayments() {
      try {
        const response = await fetch('/api/loan-repayments', {
          headers: { 'Authorization': 'Bearer ' + getToken() }
        });
        if (response.ok) {
          repayments = await response.json();
          renderRepaymentsTable();
        }
      } catch (error) {
        console.error('Error loading repayments:', error);
      }
    }

    function populateEmployeeDropdowns() {
      const employeeSelects = ['loanEmployee'];
      employeeSelects.forEach(id => {
        const select = document.getElementById(id);
        if (select) {
          select.innerHTML = '<option value="">Pilih Karyawan</option>';
          employees.forEach(emp => {
            select.add(new Option(`${emp.firstName} ${emp.lastName}`, emp.id));
          });
        }
      });
    }

    function populateLoanTypeDropdowns() {
      const loanTypeSelects = ['loanType'];
      loanTypeSelects.forEach(id => {
        const select = document.getElementById(id);
        if (select) {
          select.innerHTML = '<option value="">Pilih Jenis Pinjaman</option>';
          loanTypes.forEach(type => {
            select.add(new Option(type.name, type.id));
          });
        }
      });
    }

    function renderPendingLoansTable() {
      const tableBody = document.getElementById('pendingLoansTableBody');
      tableBody.innerHTML = '';

      const pendingLoans = loans.filter(loan => loan.status === 'pending');

      if (!pendingLoans || pendingLoans.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="7" class="text-center text-muted">Tidak ada pinjaman tertunda</td></tr>';
        return;
      }

      pendingLoans.forEach(loan => {
        const employee = employees.find(e => e.id === loan.employeeId);
        const loanType = loanTypes.find(t => t.id === loan.loanTypeId);

        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${employee ? `${employee.firstName} ${employee.lastName}` : 'N/A'}</td>
          <td>${loanType ? loanType.name : 'N/A'}</td>
          <td>${formatIDR(loan.amount)}</td>
          <td>${loan.tenor} bulan</td>
          <td>${new Date(loan.applicationDate).toLocaleDateString('id-ID')}</td>
          <td><span class="badge bg-warning">Pending</span></td>
          <td>
            <div class="btn-group">
              <button class="btn btn-sm btn-outline-success approve-loan" data-id="${loan.id}" title="Setujui">
                <i class="bi bi-check-circle"></i>
              </button>
              <button class="btn btn-sm btn-outline-danger reject-loan" data-id="${loan.id}" title="Tolak">
                <i class="bi bi-x-circle"></i>
              </button>
            </div>
          </td>
        `;
        tableBody.appendChild(row);
      });

      addPendingLoanActionListeners();
    }

    function renderManageLoansTable() {
      const tableBody = document.getElementById('manageLoansTableBody');
      tableBody.innerHTML = '';

      const activeLoans = loans.filter(loan => loan.status === 'approved');

      if (!activeLoans || activeLoans.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="7" class="text-center text-muted">Tidak ada pinjaman aktif</td></tr>';
        return;
      }

      activeLoans.forEach(loan => {
        const employee = employees.find(e => e.id === loan.employeeId);
        const loanType = loanTypes.find(t => t.id === loan.loanTypeId);
        const remainingAmount = loan.amount - (loan.paidAmount || 0);

        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${employee ? `${employee.firstName} ${employee.lastName}` : 'N/A'}</td>
          <td>${loanType ? loanType.name : 'N/A'}</td>
          <td>${formatIDR(loan.amount)}</td>
          <td>${formatIDR(remainingAmount)}</td>
          <td>${loan.tenor} bulan</td>
          <td><span class="badge bg-success">Aktif</span></td>
          <td>
            <div class="btn-group">
              <button class="btn btn-sm btn-outline-primary view-loan" data-id="${loan.id}" title="Lihat Detail">
                <i class="bi bi-eye"></i>
              </button>
              <button class="btn btn-sm btn-outline-info add-payment" data-id="${loan.id}" title="Tambah Pembayaran">
                <i class="bi bi-cash"></i>
              </button>
            </div>
          </td>
        `;
        tableBody.appendChild(row);
      });

      addManageLoanActionListeners();
    }

    function renderRepaymentsTable() {
      const tableBody = document.getElementById('repaymentsTableBody');
      tableBody.innerHTML = '';

      if (!repayments || repayments.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="7" class="text-center text-muted">Tidak ada data pembayaran</td></tr>';
        return;
      }

      repayments.forEach(repayment => {
        const loan = loans.find(l => l.id === repayment.loanId);
        const employee = loan ? employees.find(e => e.id === loan.employeeId) : null;

        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${employee ? `${employee.firstName} ${employee.lastName}` : 'N/A'}</td>
          <td>Pinjaman ${loan ? formatIDR(loan.amount) : 'N/A'}</td>
          <td>${formatIDR(repayment.amount)}</td>
          <td>${new Date(repayment.paymentDate).toLocaleDateString('id-ID')}</td>
          <td>${repayment.paymentMethod || 'Transfer'}</td>
          <td><span class="badge bg-success">Lunas</span></td>
          <td>
            <button class="btn btn-sm btn-outline-primary view-receipt" data-id="${repayment.id}" title="Lihat Bukti">
              <i class="bi bi-receipt"></i>
            </button>
          </td>
        `;
        tableBody.appendChild(row);
      });
    }

    function renderLoanTypesTable() {
      const tableBody = document.getElementById('loanTypesTableBody');
      tableBody.innerHTML = '';

      if (!loanTypes || loanTypes.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="6" class="text-center text-muted">Tidak ada jenis pinjaman</td></tr>';
        return;
      }

      loanTypes.forEach(type => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${type.name}</td>
          <td>${type.description || '-'}</td>
          <td>${type.interestRate}%</td>
          <td>${type.maxTenor} bulan</td>
          <td><span class="badge bg-success">Aktif</span></td>
          <td>
            <div class="btn-group">
              <button class="btn btn-sm btn-outline-warning edit-type" data-id="${type.id}" title="Edit">
                <i class="bi bi-pencil"></i>
              </button>
              <button class="btn btn-sm btn-outline-danger delete-type" data-id="${type.id}" title="Hapus">
                <i class="bi bi-trash"></i>
              </button>
            </div>
          </td>
        `;
        tableBody.appendChild(row);
      });

      addLoanTypeActionListeners();
    }

    function updateSummary() {
      const totalLoans = loans.filter(l => l.status === 'approved').length;
      const pendingLoans = loans.filter(l => l.status === 'pending').length;
      const totalPayments = repayments.reduce((sum, r) => sum + r.amount, 0);
      const outstandingAmount = loans
        .filter(l => l.status === 'approved')
        .reduce((sum, l) => sum + (l.amount - (l.paidAmount || 0)), 0);

      document.getElementById('totalLoans').textContent = totalLoans;
      document.getElementById('pendingLoans').textContent = pendingLoans;
      document.getElementById('totalPayments').textContent = formatIDR(totalPayments);
      document.getElementById('outstandingAmount').textContent = formatIDR(outstandingAmount);
    }

    function addPendingLoanActionListeners() {
      document.querySelectorAll('.approve-loan').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const loanId = e.target.closest('button').dataset.id;
          approveLoan(loanId);
        });
      });

      document.querySelectorAll('.reject-loan').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const loanId = e.target.closest('button').dataset.id;
          rejectLoan(loanId);
        });
      });
    }

    function addManageLoanActionListeners() {
      document.querySelectorAll('.view-loan').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const loanId = e.target.closest('button').dataset.id;
          viewLoan(loanId);
        });
      });

      document.querySelectorAll('.add-payment').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const loanId = e.target.closest('button').dataset.id;
          addPayment(loanId);
        });
      });
    }

    function addLoanTypeActionListeners() {
      document.querySelectorAll('.edit-type').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const typeId = e.target.closest('button').dataset.id;
          editLoanType(typeId);
        });
      });

      document.querySelectorAll('.delete-type').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const typeId = e.target.closest('button').dataset.id;
          deleteLoanType(typeId);
        });
      });
    }

    // Calculate monthly installment
    document.getElementById('loanAmount').addEventListener('input', calculateInstallment);
    document.getElementById('loanTenor').addEventListener('input', calculateInstallment);
    document.getElementById('loanType').addEventListener('change', calculateInstallment);

    function calculateInstallment() {
      const amount = parseFloat(document.getElementById('loanAmount').value) || 0;
      const tenor = parseInt(document.getElementById('loanTenor').value) || 1;
      const loanTypeId = document.getElementById('loanType').value;
      const loanType = loanTypes.find(t => t.id == loanTypeId);

      if (amount && tenor && loanType) {
        const interestRate = loanType.interestRate / 100;
        const totalAmount = amount * (1 + interestRate);
        const monthlyInstallment = totalAmount / tenor;
        document.getElementById('monthlyInstallment').value = Math.round(monthlyInstallment);
      }
    }

    // Form handlers
    document.getElementById('submitLoanBtn').addEventListener('click', async function() {
      const formData = {
        employeeId: document.getElementById('loanEmployee').value,
        loanTypeId: document.getElementById('loanType').value,
        amount: parseFloat(document.getElementById('loanAmount').value),
        tenor: parseInt(document.getElementById('loanTenor').value),
        purpose: document.getElementById('loanPurpose').value,
        description: document.getElementById('loanDescription').value
      };

      if (!formData.employeeId || !formData.loanTypeId || !formData.amount || !formData.tenor || !formData.purpose) {
        alert('Mohon lengkapi semua field yang diperlukan');
        return;
      }

      try {
        const response = await fetch('/api/employee-loans', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + getToken()
          },
          body: JSON.stringify(formData)
        });

        if (response.ok) {
          bootstrap.Modal.getInstance(document.getElementById('addLoanModal')).hide();
          document.getElementById('loanForm').reset();
          await loadLoans();
          alert('Pengajuan pinjaman berhasil dikirim!');
        } else {
          alert('Gagal mengajukan pinjaman');
        }
      } catch (error) {
        alert('Error: ' + error.message);
      }
    });

    document.getElementById('saveLoanTypeBtn').addEventListener('click', async function() {
      const formData = {
        name: document.getElementById('loanTypeName').value,
        description: document.getElementById('loanTypeDescription').value,
        interestRate: parseFloat(document.getElementById('interestRate').value),
        maxTenor: parseInt(document.getElementById('maxTenor').value),
        eligibilityCriteria: document.getElementById('eligibilityCriteria').value
      };

      if (!formData.name || !formData.interestRate || !formData.maxTenor) {
        alert('Mohon lengkapi semua field yang diperlukan');
        return;
      }

      try {
        const response = await fetch('/api/loan-types', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + getToken()
          },
          body: JSON.stringify(formData)
        });

        if (response.ok) {
          bootstrap.Modal.getInstance(document.getElementById('addLoanTypeModal')).hide();
          document.getElementById('loanTypeForm').reset();
          await loadLoanTypes();
          alert('Jenis pinjaman berhasil ditambahkan!');
        } else {
          alert('Gagal menambah jenis pinjaman');
        }
      } catch (error) {
        alert('Error: ' + error.message);
      }
    });

    // Placeholder functions for future implementation
    function approveLoan(id) { alert('Fitur approve pinjaman akan segera hadir'); }
    function rejectLoan(id) { alert('Fitur reject pinjaman akan segera hadir'); }
    function viewLoan(id) { alert('Fitur lihat detail pinjaman akan segera hadir'); }
    function addPayment(id) { alert('Fitur tambah pembayaran akan segera hadir'); }
    function editLoanType(id) { alert('Fitur edit jenis pinjaman akan segera hadir'); }
    function deleteLoanType(id) { alert('Fitur hapus jenis pinjaman akan segera hadir'); }

    // Initialize
    document.addEventListener('DOMContentLoaded', async function() {
      await loadEmployees();
      await loadLoanTypes();
      await loadLoans();
      await loadRepayments();
    });
  </script>
</body>
</html>

