<!DOCTYPE html>
<html lang="id">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Manajemen Update Foto Siswa</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
  <%- include('partials/navbar') %>

  <div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
      <div>
        <h2>Manajemen Update Foto Siswa</h2>
        <p class="text-muted mb-0">Admin dapat menutup (lock) proses update foto referensi per siswa, per kelas, atau seluruh siswa.</p>
      </div>
      <div class="d-flex gap-2">
        <button class="btn btn-outline-secondary" onclick="window.print()">Print</button>
      </div>
    </div>

    <!-- Actions -->
    <div class="card mb-3">
      <div class="card-body">
        <div class="row g-3 align-items-end">
          <div class="col-md-3">
            <label class="form-label">Kelas</label>
            <select class="form-select" id="classId">
              <option value="">Pilih Kelas</option>
              <option value="10">Kelas 10</option>
              <option value="11">Kelas 11</option>
              <option value="12">Kelas 12</option>
            </select>
          </div>
          <div class="col-md-3">
            <label class="form-label">NISN (Opsional)</label>
            <input class="form-control" id="nisn" placeholder="Masukkan NISN untuk target per siswa" />
          </div>
          <div class="col-md-6">
            <div class="d-flex flex-wrap gap-2">
              <button id="btnCloseStudent" class="btn btn-warning" type="button">Tutup Per Siswa</button>
              <button id="btnCloseClass" class="btn btn-warning" type="button">Tutup Per Kelas</button>
              <button id="btnCloseAll" class="btn btn-danger" type="button">Tutup Semua</button>
              <div class="vr"></div>
              <button id="btnOpenStudent" class="btn btn-outline-success" type="button">Buka Per Siswa</button>
              <button id="btnOpenClass" class="btn btn-outline-success" type="button">Buka Per Kelas</button>
              <button id="btnOpenAll" class="btn btn-outline-primary" type="button">Buka Semua</button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Status Table -->
    <div class="card">
      <div class="card-header d-flex justify-content-between align-items-center">
        <span>Status Kunci Update Foto</span>
        <div class="d-flex gap-2">
          <input type="text" class="form-control form-control-sm" id="search" placeholder="Cari NISN/Nama" style="width: 220px;" />
          <button id="btnRefresh" class="btn btn-sm btn-outline-secondary" type="button">Sinkron Status</button>
        </div>
      </div>
      <div class="card-body">
        <div class="table-responsive">
          <table class="table table-striped align-middle" id="statusTable">
            <thead>
              <tr>
                <th>NISN</th>
                <th>Nama</th>
                <th>Kelas</th>
                <th>Status Update</th>
                <th>Terakhir Update</th>
                <th>Aksi Cepat</th>
              </tr>
            </thead>
            <tbody id="statusBody">
              <tr>
                <td colspan="6" class="text-center text-muted">Memuat data status (mock)...</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Helper call to backend (proxied via /api/*)
    async function postJSON(url, data) {
      const res = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          ...(localStorage.getItem('token') ? { 'Authorization': 'Bearer ' + localStorage.getItem('token') } : {})
        },
        body: JSON.stringify(data || {})
      });
      if (!res.ok) throw new Error('Request failed');
      return res.json().catch(() => ({}));
    }

    function getFilters() {
      return {
        classId: document.getElementById('classId').value,
        nisn: document.getElementById('nisn').value.trim()
      };
    }

    async function fetchClasses() {
      const sel = document.getElementById('classId');
      const current = sel.value;
      try {
        const res = await fetch('/api/classes', {
          headers: {
            ...(localStorage.getItem('token') ? { 'Authorization': 'Bearer ' + localStorage.getItem('token') } : {})
          }
        });
        if (!res.ok) throw new Error('Classes API not ready');
        const data = await res.json(); // Expecting [{id:'10', name:'Kelas 10'}, ...]
        // Reset options
        sel.innerHTML = '<option value="">Pilih Kelas</option>';
        (data || []).forEach(c => {
          const opt = document.createElement('option');
          opt.value = c.id || c.code || c.kelas || c.name;
          opt.textContent = c.name || ('Kelas ' + (c.id || c.code || c.kelas));
          sel.appendChild(opt);
        });
        if (current) sel.value = current;
      } catch (err) {
        // Keep default static options on failure
      }
    }

    // Load status dari API jika tersedia, fallback ke dummy data
    async function loadStatus() {
      const body = document.getElementById('statusBody');
      body.innerHTML = '';
      try {
        const params = new URLSearchParams();
        const classId = document.getElementById('classId').value;
        const q = document.getElementById('search').value.trim();
        if (classId) params.set('classId', classId);
        if (q) params.set('q', q);
        const res = await fetch('/api/photo-updates/status' + (params.toString() ? ('?' + params.toString()) : ''), {
          headers: {
            ...(localStorage.getItem('token') ? { 'Authorization': 'Bearer ' + localStorage.getItem('token') } : {})
          }
        });
        if (!res.ok) throw new Error('Status API not ready');
        const data = await res.json();
        (data || []).forEach(r => {
          const tr = document.createElement('tr');
          tr.innerHTML = `
            <td>${r.nisn}</td>
            <td>${r.nama}</td>
            <td>${r.kelas}</td>
            <td>${r.locked ? '<span class=\"badge bg-danger\">Tertutup</span>' : '<span class=\"badge bg-success\">Terbuka</span>'}</td>
            <td>${r.updatedAt || '-'}</td>
            <td>
              ${r.locked
                ? '<button class=\"btn btn-sm btn-outline-success\" data-action=\"open\" data-nisn=\"'+r.nisn+'\">Buka</button>'
                : '<button class=\"btn btn-sm btn-outline-danger\" data-action=\"close\" data-nisn=\"'+r.nisn+'\">Tutup</button>'}
            </td>`;
          body.appendChild(tr);
        });
        if (!body.children.length) {
          const tr = document.createElement('tr');
          tr.innerHTML = '<td colspan="6" class="text-center text-muted">Tidak ada data</td>';
          body.appendChild(tr);
        }
      } catch (err) {
        const dummy = [
          { nisn: '10001', nama: 'Andi', kelas: '10', locked: false, updatedAt: '2025-01-01 08:00' },
          { nisn: '10002', nama: 'Budi', kelas: '10', locked: true, updatedAt: '2025-01-02 10:20' },
          { nisn: '11001', nama: 'Cici', kelas: '11', locked: false, updatedAt: '2025-01-03 12:10' },
        ];
        const q = document.getElementById('search').value.toLowerCase();
        dummy
          .filter(r => !q || r.nisn.includes(q) || r.nama.toLowerCase().includes(q))
          .forEach(r => {
            const tr = document.createElement('tr');
            tr.innerHTML = `
              <td>${r.nisn}</td>
              <td>${r.nama}</td>
              <td>${r.kelas}</td>
              <td>${r.locked ? '<span class=\"badge bg-danger\">Tertutup</span>' : '<span class=\"badge bg-success\">Terbuka</span>'}</td>
              <td>${r.updatedAt}</td>
              <td>
                ${r.locked
                  ? '<button class=\"btn btn-sm btn-outline-success\" data-action=\"open\" data-nisn=\"'+r.nisn+'\">Buka</button>'
                  : '<button class=\"btn btn-sm btn-outline-danger\" data-action=\"close\" data-nisn=\"'+r.nisn+'\">Tutup</button>'}
              </td>`;
            body.appendChild(tr);
          });
      }
    }

    // Bind table actions
    document.getElementById('statusBody').addEventListener('click', async (e) => {
      const btn = e.target.closest('button');
      if (!btn) return;
      const nisn = btn.getAttribute('data-nisn');
      const action = btn.getAttribute('data-action');
      try {
        // Example API shape
        // await postJSON('/api/photo-updates/'+action, { scope: 'student', nisn });
        alert(`(Mock) ${action === 'close' ? 'Tutup' : 'Buka'} untuk NISN ${nisn}`);
        loadStatus();
      } catch (err) {
        alert('Gagal melakukan aksi: ' + err.message);
      }
    });

    // Top action buttons
    document.getElementById('btnCloseStudent').addEventListener('click', async () => {
      const { nisn } = getFilters();
      if (!nisn) { alert('Isi NISN untuk menutup per siswa.'); return; }
      try {
        await postJSON('/api/photo-updates/close', { scope: 'student', nisn });
        alert('Berhasil menutup update foto untuk siswa NISN ' + nisn);
      } catch (err) {
        alert('(Mock) Menutup update foto untuk siswa NISN ' + nisn);
      }
      loadStatus();
    });
    document.getElementById('btnCloseClass').addEventListener('click', async () => {
      const { classId } = getFilters();
      if (!classId) { alert('Pilih kelas terlebih dahulu.'); return; }
      try {
        await postJSON('/api/photo-updates/close', { scope: 'class', classId });
        alert('Berhasil menutup update foto untuk kelas ' + classId);
      } catch (err) {
        alert('(Mock) Menutup update foto untuk kelas ' + classId);
      }
      loadStatus();
    });
    document.getElementById('btnCloseAll').addEventListener('click', async () => {
      try {
        await postJSON('/api/photo-updates/close', { scope: 'all' });
        alert('Berhasil menutup update foto untuk semua siswa');
      } catch (err) {
        alert('(Mock) Menutup update foto untuk semua siswa');
      }
      loadStatus();
    });
    document.getElementById('btnOpenStudent').addEventListener('click', async () => {
      const { nisn } = getFilters();
      if (!nisn) { alert('Isi NISN untuk membuka per siswa.'); return; }
      try {
        await postJSON('/api/photo-updates/open', { scope: 'student', nisn });
        alert('Berhasil membuka update foto untuk siswa NISN ' + nisn);
      } catch (err) {
        alert('(Mock) Membuka update foto untuk siswa NISN ' + nisn);
      }
      loadStatus();
    });
    document.getElementById('btnOpenClass').addEventListener('click', async () => {
      const { classId } = getFilters();
      if (!classId) { alert('Pilih kelas terlebih dahulu.'); return; }
      try {
        await postJSON('/api/photo-updates/open', { scope: 'class', classId });
        alert('Berhasil membuka update foto untuk kelas ' + classId);
      } catch (err) {
        alert('(Mock) Membuka update foto untuk kelas ' + classId);
      }
      loadStatus();
    });
    document.getElementById('btnOpenAll').addEventListener('click', async () => {
      try {
        await postJSON('/api/photo-updates/open', { scope: 'all' });
        alert('Berhasil membuka update foto untuk semua siswa');
      } catch (err) {
        alert('(Mock) Membuka update foto untuk semua siswa');
      }
      loadStatus();
    });
    document.getElementById('btnRefresh').addEventListener('click', loadStatus);
    document.getElementById('search').addEventListener('input', loadStatus);

    // Init
    fetchClasses();
    loadStatus();
  </script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
