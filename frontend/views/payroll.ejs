<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manajemen Penggajian - Sistem HRM & Payroll</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <%- include('partials/navbar') %>

    <div class="container mt-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2>Manajemen Penggajian</h2>
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#generatePayrollModal">
                <i class="bi bi-plus-circle"></i> Buat Penggajian
            </button>
        </div>

        <div class="card mb-4">
            <div class="card-body">
                <h5>Ringkasan Penggajian</h5>
                <div class="row">
                    <div class="col-md-3">
                        <div class="alert alert-info"><strong>Total Karyawan:</strong> <span id="sumEmployees">-</span></div>
                    </div>
                    <div class="col-md-3">
                        <div class="alert alert-warning"><strong>Belum Digaji:</strong> <span id="sumPending">-</span></div>
                    </div>
                    <div class="col-md-3">
                        <div class="alert alert-success"><strong>Sudah Diproses:</strong> <span id="sumPaid">-</span></div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card">
            <div class="card-header">
                <h5>Rekaman Penggajian</h5>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-3">
                        <select class="form-select" id="monthFilter">
                            <option value="">Pilih Bulan</option>
                            <option value="1">Januari</option>
                            <option value="2">Februari</option>
                            <option value="3">Maret</option>
                            <option value="4">April</option>
                            <option value="5">Mei</option>
                            <option value="6">Juni</option>
                            <option value="7">Juli</option>
                            <option value="8">Agustus</option>
                            <option value="9">September</option>
                            <option value="10">Oktober</option>
                            <option value="11">November</option>
                            <option value="12">Desember</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <select class="form-select" id="yearFilter">
                            <option value="">Pilih Tahun</option>
                            <option value="2025">2025</option>
                            <option value="2024">2024</option>
                            <option value="2023">2023</option>
                            <option value="2022">2022</option>
                            <option value="2021">2021</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <button class="btn btn-primary" id="filterBtn">Filter</button>
                    </div>
                </div>
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Karyawan</th>
                                <th>Bulan</th>
                                <th>Tahun</th>
                                <th>Gaji Pokok</th>
                                <th>Tunjangan</th>
                                <th>Potongan</th>
                                <th>Gaji Bersih</th>
                                <th>Status</th>
                                <th>Aksi</th>
                            </tr>
                        </thead>
                        <tbody id="payrollTableBody">
                            <!-- Payroll data will be loaded here -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Generate Payroll Modal -->
    <div class="modal fade" id="generatePayrollModal" tabindex="-1" aria-labelledby="generatePayrollModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="generatePayrollModalLabel">Buat Penggajian</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Tutup"></button>
                </div>
                <div class="modal-body">
                    <form id="generatePayrollForm">
                        <div class="mb-3">
                            <label for="payrollEmployee" class="form-label">Karyawan</label>
                            <select class="form-select" id="payrollEmployee" required></select>
                        </div>
                        <div class="mb-3">
                            <label for="payrollMonth" class="form-label">Bulan</label>
                            <select class="form-select" id="payrollMonth" required>
                                <option value="">Pilih Bulan</option>
                                <option value="1">Januari</option>
                                <option value="2">Februari</option>
                                <option value="3">Maret</option>
                                <option value="4">April</option>
                                <option value="5">Mei</option>
                                <option value="6">Juni</option>
                                <option value="7">Juli</option>
                                <option value="8">Agustus</option>
                                <option value="9">September</option>
                                <option value="10">Oktober</option>
                                <option value="11">November</option>
                                <option value="12">Desember</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="payrollYear" class="form-label">Tahun</label>
                            <select class="form-select" id="payrollYear" required>
                                <option value="">Pilih Tahun</option>
                                <option value="2025">2025</option>
                                <option value="2024">2024</option>
                                <option value="2023">2023</option>
                                <option value="2022">2022</option>
                                <option value="2021">2021</option>
                            </select>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <label for="basicSalary" class="form-label">Gaji Pokok</label>
                                <input type="number" class="form-control" id="basicSalary" readonly>
                            </div>
                            <div class="col-md-4">
                                <label for="allowances" class="form-label">Tunjangan</label>
                                <input type="number" class="form-control" id="allowances" value="0">
                            </div>
                            <div class="col-md-4">
                                <label for="deductions" class="form-control">Potongan</label>
                                <input type="number" class="form-control" id="deductions" value="0">
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="notes" class="form-label">Catatan</label>
                            <textarea class="form-control" id="notes" rows="3"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Tutup</button>
                    <button type="button" class="btn btn-primary" id="generatePayrollBtn">Buat Penggajian</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        function getToken() { return localStorage.getItem('token') || ''; }
        let payrollData = [];
        let employees = [];

        // Logout functionality
        document.getElementById('logoutBtn').addEventListener('click', function(e) {
            e.preventDefault();
            localStorage.removeItem('token');
            window.location.href = '/login';
        });

        function idr(n){return new Intl.NumberFormat('id-ID',{style:'currency',currency:'IDR',minimumFractionDigits:0}).format(n||0)}

        async function loadEmployees(){
            const res = await fetch('/api/employees',{headers:{'Authorization':'Bearer '+getToken()}});
            if(res.status===401) return window.location.href='/login';
            employees = await res.json();
            const sel = document.getElementById('payrollEmployee');
            sel.innerHTML = '';
            employees.forEach(e=> sel.add(new Option(`${e.firstName} ${e.lastName} (${e.employeeId})`, e.id)) );
            sel.addEventListener('change', ()=>{
                const emp = employees.find(x=> x.id==sel.value);
                const nameEl = document.getElementById('employeeName'); if (nameEl) nameEl.value = emp ? `${emp.firstName} ${emp.lastName}` : '';
                const basicEl = document.getElementById('basicSalary'); if (basicEl) basicEl.value = emp && emp.basicSalary ? emp.basicSalary : 0;
            });
            if (employees.length){ sel.value = employees[0].id; sel.dispatchEvent(new Event('change')); }
            // Also populate basicSalary field for the first/default employee
            const firstEmp = employees.find(x=> x.id==sel.value);
            const basicEl = document.getElementById('basicSalary');
            if (basicEl && firstEmp) basicEl.value = firstEmp.basicSalary || 0;
        }

        async function loadPayrolls(){
            const res = await fetch('/api/payrolls',{headers:{'Authorization':'Bearer '+getToken()}});
            const data = res.ok ? await res.json() : [];
            payrollData = data;
            renderPayrollTable(data);
            updateSummary();
        }

        function renderPayrollTable(records){
            const tableBody = document.getElementById('payrollTableBody');
            tableBody.innerHTML = '';
            if(!records.length){ tableBody.innerHTML = '<tr><td colspan="9" class="text-center text-muted">Tidak ada data</td></tr>'; return; }
            records.forEach(p=>{
                const emp = p.employee && p.employee.id ? employees.find(e=> e.id === p.employee.id) : null;
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${emp ? emp.firstName+ ' ' + emp.lastName : '-'}</td>
                    <td>${p.payrollMonth || '-'}</td>
                    <td>${p.payrollYear || '-'}</td>
                    <td>${idr(p.basicSalary)}</td>
                    <td>${idr(p.allowances)}</td>
                    <td>${idr(p.deductions)}</td>
                    <td>${idr(p.netSalary)}</td>
                    <td><span class="badge bg-${p.status==='paid'?'success':'warning'}">${p.status||'-'}</span></td>
                    <td>
                        <div class="btn-group">
                            <button class="btn btn-sm btn-outline-primary view-payroll" data-id="${p.id}" title="Lihat Detail">
                                <i class="bi bi-eye"></i>
                            </button>
                            ${p.status === 'pending' ? `
                            <button class="btn btn-sm btn-outline-success record-payment" data-id="${p.id}" title="Catat Pembayaran">
                                <i class="bi bi-wallet2"></i>
                            </button>
                            ` : `
                            <button class="btn btn-sm btn-outline-info view-receipt" data-id="${p.id}" title="Lihat Bukti">
                                <i class="bi bi-receipt"></i>
                            </button>
                            `}
                            <button class="btn btn-sm btn-outline-danger delete-payroll" data-id="${p.id}" title="Hapus">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </td>`;
                tableBody.appendChild(row);

                // Add action listeners after rendering
                addPayrollActionListeners();
            });
        }

        function updateSummary(){
            document.getElementById('sumEmployees').textContent = employees.length;
            const pending = payrollData.filter(p=>p.status==='pending').length;
            const paid = payrollData.filter(p=>p.status==='paid').length;
            document.getElementById('sumPending').textContent = pending;
            document.getElementById('sumPaid').textContent = paid;
        }

        document.getElementById('filterBtn').addEventListener('click', function(){
            const m = document.getElementById('monthFilter').value; const y = document.getElementById('yearFilter').value;
            const filtered = payrollData.filter(p => (!m || Number(p.payrollMonth)==Number(m) || p.payrollMonth==m) && (!y || p.payrollYear==y));
            renderPayrollTable(filtered);
        });

        document.getElementById('generatePayrollBtn').addEventListener('click', async function(){
            const empId = document.getElementById('payrollEmployee').value;
            const month = document.getElementById('payrollMonth').value;
            const year = document.getElementById('payrollYear').value;
            const basic = parseFloat(document.getElementById('basicSalary').value || '0');
            const allowances = parseFloat(document.getElementById('allowances').value || '0');
            const deductions = parseFloat(document.getElementById('deductions').value || '0');
            const notes = document.getElementById('notes').value || null;
            if(!empId || !month || !year) return alert('Lengkapi karyawan, bulan, tahun');
            const netSalary = basic + allowances - deductions;
            const payload = { employee: { id: Number(empId) }, payrollMonth: month, payrollYear: year, basicSalary: basic, allowances, deductions, netSalary, notes };
            const res = await fetch('/api/payrolls', { method:'POST', headers:{'Content-Type':'application/json','Authorization':'Bearer '+getToken()}, body: JSON.stringify(payload)});
            if(!res.ok){ alert('Gagal membuat penggajian'); return; }
            bootstrap.Modal.getInstance(document.getElementById('generatePayrollModal')).hide();
            await loadPayrolls();
        });

        // Add action button event listeners
        function addPayrollActionListeners() {
            // View Payroll Details
            document.querySelectorAll('.view-payroll').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const payrollId = e.target.closest('button').dataset.id;
                    viewPayroll(payrollId);
                });
            });

            // Record Payment
            document.querySelectorAll('.record-payment').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const payrollId = e.target.closest('button').dataset.id;
                    recordPayment(payrollId);
                });
            });

            // View Receipt (after payment)
            document.querySelectorAll('.view-receipt').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const payrollId = e.target.closest('button').dataset.id;
                    viewReceipt(payrollId);
                });
            });

            // Delete Payroll
            document.querySelectorAll('.delete-payroll').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const payrollId = e.target.closest('button').dataset.id;
                    deletePayroll(payrollId);
                });
            });
        }

        async function viewPayroll(payrollId) {
            const payroll = payrollData.find(p => p.id == payrollId);
            if (!payroll) return;

            const emp = employees.find(e => e.id === payroll.employee?.id);
            const employeeName = emp ? `${emp.firstName} ${emp.lastName}` : 'N/A';

            const detailsHtml = `
                <div class="row">
                    <div class="col-md-6">
                        <h6>Informasi Karyawan</h6>
                        <p><strong>Nama:</strong> ${employeeName}</p>
                        <p><strong>Bulan:</strong> ${payroll.payrollMonth}</p>
                        <p><strong>Tahun:</strong> ${payroll.payrollYear}</p>
                        <p><strong>Status:</strong> <span class="badge bg-${payroll.status==='paid'?'success':'warning'}">${payroll.status||'pending'}</span></p>
                    </div>
                    <div class="col-md-6">
                        <h6>Rincian Gaji</h6>
                        <p><strong>Gaji Pokok:</strong> ${idr(payroll.basicSalary)}</p>
                        <p><strong>Tunjangan:</strong> ${idr(payroll.allowances)}</p>
                        <p><strong>Potongan:</strong> ${idr(payroll.deductions)}</p>
                        <hr>
                        <p><strong><u>Gaji Bersih:</strong> ${idr(payroll.netSalary)}</u></p>
                    </div>
                </div>
                ${payroll.paymentDate ? `<p><strong>Tanggal Pembayaran:</strong> ${new Date(payroll.paymentDate).toLocaleDateString('id-ID')}</p>` : ''}
                ${payroll.paymentMethod ? `<p><strong>Metode Pembayaran:</strong> ${payroll.paymentMethod}</p>` : ''}
                <div id="payrollData" style="display:none;">
                    <div class="employee-name">${employeeName}</div>
                    <div class="period">${payroll.payrollMonth} ${payroll.payrollYear}</div>
                    <div class="basic-salary">${idr(payroll.basicSalary)}</div>
                    <div class="allowances">${idr(payroll.allowances)}</div>
                    <div class="deductions">${idr(payroll.deductions)}</div>
                    <div class="net-salary">${idr(payroll.netSalary)}</div>
                </div>
            `;

            showDetailsModal('Detail Payroll', detailsHtml, payrollId);
        }

        async function recordPayment(payrollId) {
            const paymentMethod = prompt('Masukkan metode pembayaran (bank_transfer/cash/check):');
            if (!paymentMethod) return;

            try {
                const res = await fetch(`/api/payrolls/${payrollId}/payment`, {
                    method: 'POST',
                    headers: {'Content-Type': 'text/plain', 'Authorization': 'Bearer ' + getToken()},
                    body: paymentMethod
                });

                if (res.ok) {
                    alert('Pembayaran berhasil dicatat!');
                    await loadPayrolls();
                } else {
                    alert('Gagal mencatat pembayaran');
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }

        function viewReceipt(payrollId) {
            // For paid payrolls, show receipt/download slip
            window.open(`/api/reports/payslip/${payrollId}`, '_blank');
        }

        async function deletePayroll(payrollId) {
            if (!confirm('Hapus payroll record ini?')) return;

            try {
                const res = await fetch(`/api/payrolls/${payrollId}`, {
                    method: 'DELETE',
                    headers: {'Authorization': 'Bearer ' + getToken()}
                });

                if (res.ok) {
                    alert('Payroll berhasil dihapus!');
                    await loadPayrolls();
                } else {
                    alert('Gagal menghapus payroll');
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }

        function showDetailsModal(title, content, payrollId) {
            window.currentPayrollId = payrollId; // Store for print function
            // Remove existing modal if any
            const existingModal = document.getElementById('detailsModal');
            if (existingModal) existingModal.remove();

            const modalHtml = `
                <div class="modal fade" id="detailsModal" tabindex="-1">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">${title}</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">${content}</div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-primary" onclick="printPayroll()">🖨 Print Slip Gaji</button>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Tutup</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            document.body.insertAdjacentHTML('beforeend', modalHtml);
            const modal = new bootstrap.Modal(document.getElementById('detailsModal'));
            modal.show();
        }

        function printPayroll() {
            const payrollData = document.getElementById('payrollData');
            if (!payrollData) {
                alert('Data payroll tidak ditemukan');
                return;
            }

            const printWindow = window.open('', '_blank');
            const employeeName = payrollData.querySelector('.employee-name').textContent;
            const period = payrollData.querySelector('.period').textContent;
            const basicSalary = payrollData.querySelector('.basic-salary').textContent;
            const allowances = payrollData.querySelector('.allowances').textContent;
            const deductions = payrollData.querySelector('.deductions').textContent;
            const netSalary = payrollData.querySelector('.net-salary').textContent;

            printWindow.document.write(`
                <!DOCTYPE html>
                <html>
                <head>
                    <title>Slip Gaji - ${employeeName}</title>
                    <style>
                        body { font-family: Arial, sans-serif; margin: 20px; }
                        .header { text-align: center; margin-bottom: 30px; }
                        .employee-info { margin-bottom: 20px; }
                        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
                        th, td { border: 1px solid #ddd; padding: 10px; text-align: left; }
                        th { background-color: #f2f2f2; }
                        .total { font-weight: bold; }
                        @media print { body { margin: 0; } }
                    </style>
                </head>
                <body>
                    <div class="header">
                        <h2>Slip Gaji Karyawan</h2>
                        <h3>Sistem HRM & Payroll</h3>
                    </div>

                    <div class="employee-info">
                        <h4>Informasi Karyawan</h4>
                        <p><strong>Nama:</strong> ${employeeName}</p>
                        <p><strong>Periode:</strong> ${period}</p>
                    </div>

                    <table>
                        <thead>
                            <tr>
                                <th>Keterangan</th>
                                <th>Jumlah</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Gaji Pokok</td>
                                <td>${basicSalary}</td>
                            </tr>
                            <tr>
                                <td>Tunjangan</td>
                                <td>${allowances}</td>
                            </tr>
                            <tr>
                                <td>Potongan</td>
                                <td>${deductions}</td>
                            </tr>
                            <tr class="total">
                                <td><strong>Gaji Bersih</strong></td>
                                <td><strong>${netSalary}</strong></td>
                            </tr>
                        </tbody>
                    </table>

                    <div style="margin-top: 30px; text-align: center; font-size: 12px;">
                        <p>Dicetak pada: ${new Date().toLocaleString('id-ID')}</p>
                    </div>
                </body>
                </html>
            `);

            printWindow.document.close();
            printWindow.focus();

            // Wait for content to load then print
            setTimeout(() => {
                printWindow.print();
            }, 500);
        }

        async function recalculatePayroll(payrollId) {
            if (!confirm('Recalculate salary berdasarkan data karyawan terkini?')) return;

            try {
                const res = await fetch(`/api/payrolls/recalculate/${payrollId}`, {
                    method: 'POST',
                    headers: { 'Authorization': 'Bearer ' + getToken() }
                });

                if (res.ok) {
                    alert('Salary berhasil di-recalculate!');
                    bootstrap.Modal.getInstance(document.getElementById('detailsModal')).hide();
                    await loadPayrolls();
                } else {
                    alert('Gagal recalculate salary');
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }

        document.addEventListener('DOMContentLoaded', async function(){
            await loadEmployees();
            await loadPayrolls();
        });
    </script>
</body>
</html>
