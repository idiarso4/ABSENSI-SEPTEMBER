<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Pesan - HRM & Payroll System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <%- include('partials/navbar') %>

    <div class="container mt-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2><i class="bi bi-chat-dots"></i> Sistem Pesan</h2>
            <div class="d-flex gap-2">
                <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#composeMessageModal">
                    <i class="bi bi-pencil-square"></i> Tulis Pesan
                </button>
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#messageSettingsModal">
                    <i class="bi bi-gear"></i> Pengaturan
                </button>
            </div>
        </div>

        <!-- Summary Cards -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card bg-info text-white">
                    <div class="card-body">
                        <h5 class="card-title">Pesan Masuk</h5>
                        <h3 id="inboxCount">-</h3>
                        <small>Total Pesan</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-warning text-white">
                    <div class="card-body">
                        <h5 class="card-title">Belum Dibaca</h5>
                        <h3 id="unreadCount">-</h3>
                        <small>Pesan Baru</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-success text-white">
                    <div class="card-body">
                        <h5 class="card-title">Terkirim</h5>
                        <h3 id="sentCount">-</h3>
                        <small>Pesan Keluar</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-primary text-white">
                    <div class="card-body">
                        <h5 class="card-title">Kontak</h5>
                        <h3 id="contactsCount">-</h3>
                        <small>Aktif</small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Navigation Tabs -->
        <ul class="nav nav-tabs mb-4" id="messageTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="inbox-tab" data-bs-toggle="tab" data-bs-target="#inbox" type="button" role="tab">Kotak Masuk</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="sent-tab" data-bs-toggle="tab" data-bs-target="#sent" type="button" role="tab">Terkirim</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="drafts-tab" data-bs-toggle="tab" data-bs-target="#drafts" type="button" role="tab">Draft</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="contacts-tab" data-bs-toggle="tab" data-bs-target="#contacts" type="button" role="tab">Kontak</button>
            </li>
        </ul>

        <!-- Tab Content -->
        <div class="tab-content" id="messageTabContent">
            <!-- Inbox Tab -->
            <div class="tab-pane fade show active" id="inbox" role="tabpanel">
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5>Pesan Masuk</h5>
                            <div class="d-flex gap-2">
                                <input type="text" class="form-control form-control-sm" id="inboxSearch" placeholder="Cari pesan..." style="width: 200px;">
                                <select class="form-select form-select-sm" id="inboxFilter" style="width: auto;">
                                    <option value="">Semua</option>
                                    <option value="unread">Belum Dibaca</option>
                                    <option value="important">Penting</option>
                                    <option value="today">Hari Ini</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="message-list" id="inboxMessageList">
                            <div class="text-center text-muted">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Memuat...</span>
                                </div>
                                Memuat pesan masuk...
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sent Tab -->
            <div class="tab-pane fade" id="sent" role="tabpanel">
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5>Pesan Terkirim</h5>
                            <div class="d-flex gap-2">
                                <input type="text" class="form-control form-control-sm" id="sentSearch" placeholder="Cari pesan..." style="width: 200px;">
                                <select class="form-select form-select-sm" id="sentFilter" style="width: auto;">
                                    <option value="">Semua</option>
                                    <option value="today">Hari Ini</option>
                                    <option value="week">Minggu Ini</option>
                                    <option value="month">Bulan Ini</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="message-list" id="sentMessageList">
                            <div class="text-center text-muted">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Memuat...</span>
                                </div>
                                Memuat pesan terkirim...
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Drafts Tab -->
            <div class="tab-pane fade" id="drafts" role="tabpanel">
                <div class="card">
                    <div class="card-header">
                        <h5>Draft Pesan</h5>
                    </div>
                    <div class="card-body">
                        <div class="message-list" id="draftsMessageList">
                            <div class="text-center text-muted">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Memuat...</span>
                                </div>
                                Memuat draft pesan...
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Contacts Tab -->
            <div class="tab-pane fade" id="contacts" role="tabpanel">
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5>Daftar Kontak</h5>
                            <input type="text" class="form-control form-control-sm" id="contactsSearch" placeholder="Cari kontak..." style="width: 200px;">
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row" id="contactsGrid">
                            <div class="col-12 text-center text-muted">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Memuat...</span>
                                </div>
                                Memuat daftar kontak...
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Compose Message Modal -->
    <div class="modal fade" id="composeMessageModal" tabindex="-1" aria-labelledby="composeMessageModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="composeMessageModalLabel">Tulis Pesan Baru</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Tutup"></button>
                </div>
                <div class="modal-body">
                    <form id="messageForm">
                        <div class="mb-3">
                            <label for="messageRecipients" class="form-label">Kepada *</label>
                            <select class="form-select" id="messageRecipients" multiple required>
                                <option value="">Pilih Penerima</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="messageSubject" class="form-label">Subjek *</label>
                            <input type="text" class="form-control" id="messageSubject" required>
                        </div>
                        <div class="mb-3">
                            <label for="messageContent" class="form-label">Pesan *</label>
                            <textarea class="form-control" id="messageContent" rows="6" required></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="messageAttachments" class="form-label">Lampiran</label>
                            <input type="file" class="form-control" id="messageAttachments" multiple accept="image/*,.pdf,.doc,.docx">
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="messagePriority">
                                    <label class="form-check-label" for="messagePriority">
                                        Pesan Prioritas Tinggi
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="saveAsDraft">
                                    <label class="form-check-label" for="saveAsDraft">
                                        Simpan sebagai Draft
                                    </label>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Batal</button>
                    <button type="button" class="btn btn-outline-primary" id="saveDraftBtn">Simpan Draft</button>
                    <button type="button" class="btn btn-primary" id="sendMessageBtn">Kirim Pesan</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Message Settings Modal -->
    <div class="modal fade" id="messageSettingsModal" tabindex="-1" aria-labelledby="messageSettingsModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="messageSettingsModalLabel">Pengaturan Pesan</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Tutup"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <h6>Notifikasi Pesan Baru</h6>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="newMessageNotifications" checked>
                            <label class="form-check-label" for="newMessageNotifications">
                                Aktifkan notifikasi pesan baru
                            </label>
                        </div>
                    </div>
                    <div class="mb-3">
                        <h6>Auto-Reply</h6>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="autoReplyEnabled">
                            <label class="form-check-label" for="autoReplyEnabled">
                                Aktifkan balasan otomatis
                            </label>
                        </div>
                        <div class="mt-2" id="autoReplyTextContainer" style="display: none;">
                            <textarea class="form-control" id="autoReplyText" rows="3" placeholder="Pesan balasan otomatis..."></textarea>
                        </div>
                    </div>
                    <div class="mb-3">
                        <h6>Tanda Pesan</h6>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="markAsReadEnabled" checked>
                            <label class="form-check-label" for="markAsReadEnabled">
                                Tandai sebagai dibaca saat membuka
                            </label>
                        </div>
                    </div>
                    <div class="mb-3">
                        <h6>Penampilan</h6>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="showAvatars" checked>
                            <label class="form-check-label" for="showAvatars">
                                Tampilkan avatar pengirim
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="compactView" checked>
                            <label class="form-check-label" for="compactView">
                                Tampilan compact
                            </label>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Batal</button>
                    <button type="button" class="btn btn-primary" id="saveMessageSettingsBtn">Simpan Pengaturan</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Message Detail Modal -->
    <div class="modal fade" id="messageDetailModal" tabindex="-1" aria-labelledby="messageDetailModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="messageDetailModalLabel">Detail Pesan</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Tutup"></button>
                </div>
                <div class="modal-body" id="messageDetailContent">
                    <!-- Message content will be loaded here -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Tutup</button>
                    <button type="button" class="btn btn-primary" id="replyMessageBtn">Balas</button>
                    <button type="button" class="btn btn-outline-primary" id="forwardMessageBtn">Teruskan</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        function getToken() { return localStorage.getItem('token') || ''; }

        let messages = { inbox: [], sent: [], drafts: [] };
        let contacts = [];
        let currentUser = null;

        // Logout functionality
        document.getElementById('logoutBtn')?.addEventListener('click', function(e) {
            e.preventDefault();
            localStorage.removeItem('token');
            window.location.href = '/login';
        });

        async function loadCurrentUser() {
            try {
                const response = await fetch('/api/auth/me', {
                    headers: { 'Authorization': 'Bearer ' + getToken() }
                });
                if (response.ok) {
                    currentUser = await response.json();
                }
            } catch (error) {
                console.error('Error loading current user:', error);
            }
        }

        async function loadMessages() {
            try {
                const [inboxResponse, sentResponse, draftsResponse] = await Promise.all([
                    fetch('/api/messages/inbox', { headers: { 'Authorization': 'Bearer ' + getToken() } }),
                    fetch('/api/messages/sent', { headers: { 'Authorization': 'Bearer ' + getToken() } }),
                    fetch('/api/messages/drafts', { headers: { 'Authorization': 'Bearer ' + getToken() } })
                ]);

                if (inboxResponse.ok) messages.inbox = await inboxResponse.json();
                if (sentResponse.ok) messages.sent = await sentResponse.json();
                if (draftsResponse.ok) messages.drafts = await draftsResponse.json();

                renderInboxMessages();
                renderSentMessages();
                renderDraftMessages();
                updateSummary();
            } catch (error) {
                console.error('Error loading messages:', error);
            }
        }

        async function loadContacts() {
            try {
                const response = await fetch('/api/employees', {
                    headers: { 'Authorization': 'Bearer ' + getToken() }
                });
                if (response.ok) {
                    contacts = await response.json();
                    populateRecipientDropdown();
                    renderContactsGrid();
                }
            } catch (error) {
                console.error('Error loading contacts:', error);
            }
        }

        function populateRecipientDropdown() {
            const select = document.getElementById('messageRecipients');
            if (select) {
                select.innerHTML = '';
                contacts.forEach(contact => {
                    if (contact.id !== currentUser?.id) { // Don't include current user
                        const option = new Option(`${contact.firstName} ${contact.lastName}`, contact.id);
                        select.add(option);
                    }
                });
            }
        }

        function renderInboxMessages() {
            const container = document.getElementById('inboxMessageList');
            container.innerHTML = '';

            if (!messages.inbox || messages.inbox.length === 0) {
                container.innerHTML = '<div class="text-center text-muted">Tidak ada pesan masuk</div>';
                return;
            }

            messages.inbox.forEach(message => {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message-item ${message.isRead ? '' : 'unread'}`;
                messageDiv.innerHTML = `
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="flex-grow-1">
                            <div class="d-flex align-items-center gap-2">
                                <strong>${message.senderName}</strong>
                                ${message.priority ? '<span class="badge bg-danger">Prioritas</span>' : ''}
                                ${!message.isRead ? '<span class="badge bg-primary">Baru</span>' : ''}
                            </div>
                            <div class="message-subject">${message.subject}</div>
                            <div class="message-preview">${message.content.substring(0, 100)}${message.content.length > 100 ? '...' : ''}</div>
                        </div>
                        <div class="text-end">
                            <small class="text-muted">${formatMessageDate(message.sentAt)}</small>
                            <div class="mt-2">
                                <button class="btn btn-sm btn-outline-primary view-message" data-id="${message.id}" title="Baca">
                                    <i class="bi bi-eye"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger delete-message" data-id="${message.id}" title="Hapus">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                container.appendChild(messageDiv);
            });

            addMessageActionListeners();
        }

        function renderSentMessages() {
            const container = document.getElementById('sentMessageList');
            container.innerHTML = '';

            if (!messages.sent || messages.sent.length === 0) {
                container.innerHTML = '<div class="text-center text-muted">Tidak ada pesan terkirim</div>';
                return;
            }

            messages.sent.forEach(message => {
                const messageDiv = document.createElement('div');
                messageDiv.className = 'message-item';
                messageDiv.innerHTML = `
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="flex-grow-1">
                            <div class="d-flex align-items-center gap-2">
                                <strong>Kepada: ${message.recipientNames}</strong>
                                ${message.priority ? '<span class="badge bg-danger">Prioritas</span>' : ''}
                            </div>
                            <div class="message-subject">${message.subject}</div>
                            <div class="message-preview">${message.content.substring(0, 100)}${message.content.length > 100 ? '...' : ''}</div>
                        </div>
                        <div class="text-end">
                            <small class="text-muted">${formatMessageDate(message.sentAt)}</small>
                            <div class="mt-2">
                                <button class="btn btn-sm btn-outline-primary view-message" data-id="${message.id}" title="Lihat">
                                    <i class="bi bi-eye"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger delete-message" data-id="${message.id}" title="Hapus">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                container.appendChild(messageDiv);
            });

            addMessageActionListeners();
        }

        function renderDraftMessages() {
            const container = document.getElementById('draftsMessageList');
            container.innerHTML = '';

            if (!messages.drafts || messages.drafts.length === 0) {
                container.innerHTML = '<div class="text-center text-muted">Tidak ada draft pesan</div>';
                return;
            }

            messages.drafts.forEach(message => {
                const messageDiv = document.createElement('div');
                messageDiv.className = 'message-item draft';
                messageDiv.innerHTML = `
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="flex-grow-1">
                            <div class="d-flex align-items-center gap-2">
                                <strong>Draft</strong>
                                <span class="badge bg-secondary">Draft</span>
                            </div>
                            <div class="message-subject">${message.subject || 'Tanpa subjek'}</div>
                            <div class="message-preview">${message.content.substring(0, 100)}${message.content.length > 100 ? '...' : ''}</div>
                        </div>
                        <div class="text-end">
                            <small class="text-muted">${formatMessageDate(message.createdAt)}</small>
                            <div class="mt-2">
                                <button class="btn btn-sm btn-outline-warning edit-draft" data-id="${message.id}" title="Edit">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger delete-message" data-id="${message.id}" title="Hapus">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                container.appendChild(messageDiv);
            });

            addMessageActionListeners();
        }

        function renderContactsGrid() {
            const container = document.getElementById('contactsGrid');
            container.innerHTML = '';

            if (!contacts || contacts.length === 0) {
                container.innerHTML = '<div class="col-12 text-center text-muted">Tidak ada kontak</div>';
                return;
            }

            contacts.forEach(contact => {
                if (contact.id === currentUser?.id) return; // Skip current user

                const contactDiv = document.createElement('div');
                contactDiv.className = 'col-md-4 col-sm-6 mb-3';
                contactDiv.innerHTML = `
                    <div class="card h-100 contact-card">
                        <div class="card-body text-center">
                            <div class="avatar-circle mb-2">
                                ${contact.firstName.charAt(0)}${contact.lastName.charAt(0)}
                            </div>
                            <h6 class="card-title">${contact.firstName} ${contact.lastName}</h6>
                            <p class="card-text text-muted">${contact.email}</p>
                            <button class="btn btn-sm btn-outline-primary send-message" data-id="${contact.id}" data-name="${contact.firstName} ${contact.lastName}">
                                <i class="bi bi-chat-dots"></i> Kirim Pesan
                            </button>
                        </div>
                    </div>
                `;
                container.appendChild(contactDiv);
            });

            addContactActionListeners();
        }

        function updateSummary() {
            const inboxCount = messages.inbox.length;
            const unreadCount = messages.inbox.filter(m => !m.isRead).length;
            const sentCount = messages.sent.length;
            const contactsCount = contacts.length - 1; // Exclude current user

            document.getElementById('inboxCount').textContent = inboxCount;
            document.getElementById('unreadCount').textContent = unreadCount;
            document.getElementById('sentCount').textContent = sentCount;
            document.getElementById('contactsCount').textContent = contactsCount;
        }

        function formatMessageDate(dateString) {
            const date = new Date(dateString);
            const now = new Date();
            const diffTime = Math.abs(now - date);
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

            if (diffDays === 1) {
                return date.toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit' });
            } else if (diffDays <= 7) {
                return date.toLocaleDateString('id-ID', { weekday: 'short' });
            } else {
                return date.toLocaleDateString('id-ID', { day: 'numeric', month: 'short' });
            }
        }

        function addMessageActionListeners() {
            document.querySelectorAll('.view-message').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const messageId = e.target.closest('button').dataset.id;
                    viewMessage(messageId);
                });
            });

            document.querySelectorAll('.delete-message').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const messageId = e.target.closest('button').dataset.id;
                    deleteMessage(messageId);
                });
            });

            document.querySelectorAll('.edit-draft').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const messageId = e.target.closest('button').dataset.id;
                    editDraft(messageId);
                });
            });
        }

        function addContactActionListeners() {
            document.querySelectorAll('.send-message').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const contactId = e.target.closest('button').dataset.id;
                    const contactName = e.target.closest('button').dataset.name;
                    composeMessageTo(contactId, contactName);
                });
            });
        }

        // Auto-reply toggle
        document.getElementById('autoReplyEnabled').addEventListener('change', function() {
            document.getElementById('autoReplyTextContainer').style.display = this.checked ? 'block' : 'none';
        });

        // Form handlers
        document.getElementById('sendMessageBtn').addEventListener('click', async function() {
            const recipientIds = Array.from(document.getElementById('messageRecipients').selectedOptions).map(option => option.value);
            const subject = document.getElementById('messageSubject').value;
            const content = document.getElementById('messageContent').value;
            const priority = document.getElementById('messagePriority').checked;

            if (!recipientIds.length || !subject || !content) {
                alert('Mohon lengkapi semua field yang diperlukan');
                return;
            }

            try {
                const response = await fetch('/api/messages', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + getToken()
                    },
                    body: JSON.stringify({
                        recipientIds,
                        subject,
                        content,
                        priority
                    })
                });

                if (response.ok) {
                    bootstrap.Modal.getInstance(document.getElementById('composeMessageModal')).hide();
                    document.getElementById('messageForm').reset();
                    await loadMessages();
                    alert('Pesan berhasil dikirim!');
                } else {
                    alert('Gagal mengirim pesan');
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        });

        document.getElementById('saveDraftBtn').addEventListener('click', async function() {
            const recipientIds = Array.from(document.getElementById('messageRecipients').selectedOptions).map(option => option.value);
            const subject = document.getElementById('messageSubject').value;
            const content = document.getElementById('messageContent').value;
            const priority = document.getElementById('messagePriority').checked;

            try {
                const response = await fetch('/api/messages/drafts', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + getToken()
                    },
                    body: JSON.stringify({
                        recipientIds,
                        subject,
                        content,
                        priority
                    })
                });

                if (response.ok) {
                    bootstrap.Modal.getInstance(document.getElementById('composeMessageModal')).hide();
                    document.getElementById('messageForm').reset();
                    await loadMessages();
                    alert('Draft berhasil disimpan!');
                } else {
                    alert('Gagal menyimpan draft');
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        });

        document.getElementById('saveMessageSettingsBtn').addEventListener('click', async function() {
            const settings = {
                newMessageNotifications: document.getElementById('newMessageNotifications').checked,
                autoReplyEnabled: document.getElementById('autoReplyEnabled').checked,
                autoReplyText: document.getElementById('autoReplyText').value,
                markAsReadEnabled: document.getElementById('markAsReadEnabled').checked,
                showAvatars: document.getElementById('showAvatars').checked,
                compactView: document.getElementById('compactView').checked
            };

            try {
                const response = await fetch('/api/message-settings', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + getToken()
                    },
                    body: JSON.stringify(settings)
                });

                if (response.ok) {
                    bootstrap.Modal.getInstance(document.getElementById('messageSettingsModal')).hide();
                    alert('Pengaturan berhasil disimpan!');
                } else {
                    alert('Gagal menyimpan pengaturan');
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        });

        // Search functionality
        document.getElementById('inboxSearch').addEventListener('input', function() {
            filterMessages('inbox', this.value);
        });

        document.getElementById('sentSearch').addEventListener('input', function() {
            filterMessages('sent', this.value);
        });

        document.getElementById('contactsSearch').addEventListener('input', function() {
            filterContacts(this.value);
        });

        function filterMessages(type, query) {
            const container = document.getElementById(`${type}MessageList`);
            const messageItems = container.querySelectorAll('.message-item');

            messageItems.forEach(item => {
                const subject = item.querySelector('.message-subject').textContent.toLowerCase();
                const preview = item.querySelector('.message-preview').textContent.toLowerCase();
                const visible = subject.includes(query.toLowerCase()) || preview.includes(query.toLowerCase());
                item.style.display = visible ? 'block' : 'none';
            });
        }

        function filterContacts(query) {
            const contactCards = document.querySelectorAll('.contact-card');

            contactCards.forEach(card => {
                const name = card.querySelector('.card-title').textContent.toLowerCase();
                const email = card.querySelector('.card-text').textContent.toLowerCase();
                const visible = name.includes(query.toLowerCase()) || email.includes(query.toLowerCase());
                card.style.display = visible ? 'block' : 'none';
            });
        }

        // Placeholder functions for future implementation
        function viewMessage(id) { alert('Fitur lihat pesan akan segera hadir'); }
        function deleteMessage(id) { alert('Fitur hapus pesan akan segera hadir'); }
        function editDraft(id) { alert('Fitur edit draft akan segera hadir'); }
        function composeMessageTo(contactId, contactName) {
            // Pre-fill recipient
            const select = document.getElementById('messageRecipients');
            Array.from(select.options).forEach(option => {
                option.selected = option.value == contactId;
            });
            // Trigger modal
            new bootstrap.Modal(document.getElementById('composeMessageModal')).show();
        }

        // Initialize
        document.addEventListener('DOMContentLoaded', async function() {
            await loadCurrentUser();
            await loadContacts();
            await loadMessages();
        });
    </script>
</body>
</html>
